<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gbb</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-21T14:32:40.770Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gbb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】hexo博客配置各种小功能</title>
    <link href="http://yoursite.com/passages/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E5%90%84%E7%A7%8D%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/passages/hexo博客配置各种小功能/</id>
    <published>2019-01-20T08:40:00.000Z</published>
    <updated>2019-01-21T14:32:40.770Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>hexo</code> 搭建博客且主题配置后，是否想让自己的博客更加精致那？例如：评论功能，文章字数统计和阅读时长，图片预览，鼠标点击效果，添加可爱的二次元，音乐播放，RSS, 分享， 浏览量统计，搜索，等等，本文主要记录此模块内容。</p><a id="more"></a><h2 id="添加字数统计与阅读时长"><a href="#添加字数统计与阅读时长" class="headerlink" title="添加字数统计与阅读时长"></a>添加字数统计与阅读时长</h2><p>npm install <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a> –save</p><p>新建 <code>word.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt; &amp;nbsp;字数统计 : &lt;%= wordcount(page.content) %&gt; 字</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt; &amp;nbsp;阅读时长 : &lt;%= min2read(page.content) %&gt; 分</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>对应页面内容处添加判断, <code>word_count</code> 标志是否开启字数与阅读时长显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.word_count) &#123; %&gt;</span><br><span class="line">  &lt;%- partial(&quot;_partial/word.ejs&quot;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>具体效果：<br><img src="/images/post/word.png" alt=""></p><p>其中字体图标采用 <a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">fontawesome</a>, 引用css即可使用</p><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><p><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">gitalk</a> 和 <code>github issues</code> 挂钩的插件, 简单易配置</p><p>具体效果：<br><img src="/images/post/gitalk.png" alt=""></p><h2 id="照片预览"><a href="#照片预览" class="headerlink" title="照片预览"></a>照片预览</h2><p><a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">fancybox</a> , 使用简单，点击图片即可大图预览。</p><h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2><p>创建 <code>clicklove.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>引入对应 <code>js</code> 即可, 页面点击即可看到 ♥ 效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js([&apos;js/clicklove.js&apos;])%&gt;</span><br></pre></td></tr></table></figure><h2 id="添加网站二次元模型"><a href="#添加网站二次元模型" class="headerlink" title="添加网站二次元模型"></a>添加网站二次元模型</h2><p>npm install –save <a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">hexo-helper-live2d</a></p><p>根目录下 <code>_config.yaml</code> 添加配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">250</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>更多模型，安装对应模块即可。<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d-widget-models</a></p><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><ul><li><a href="https://music.163.com/#/song?id=487520041" target="_blank" rel="noopener">网易云外链播放器</a></li></ul><p>效果如下：<img src="/images/post/music.png" alt=""></p><ul><li><a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">aplayer</a>，<a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">中文文档</a></li></ul><p>效果如下：<img src="/images/post/music2.png" alt=""></p><h2 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h2><p>npm install <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> –save</p><p>根目录下 <code>_config.yaml</code> 添加配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>主题目录下的 <code>_config.yml</code> 文件，设置 RSS 地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS文件位置</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p>页面添加图标展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&lt;%- url_for(theme.rss) %&gt;&quot; title=&quot;&lt;%= __(&apos;rss_feed&apos;) %&gt;&quot;&gt;</span><br><span class="line">  &lt;i class=&quot;fa fa-rss-square&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="网站运行时间-amp-amp-总字数"><a href="#网站运行时间-amp-amp-总字数" class="headerlink" title="网站运行时间 &amp;&amp; 总字数"></a>网站运行时间 &amp;&amp; 总字数</h2><p>写个 <code>js</code> 脚本运行即可，计算时间</p><p>网站总字数在 <code>添加字数统计与阅读时长</code> 介绍时对应插件提供此功能。</p><h2 id="一键分享"><a href="#一键分享" class="headerlink" title="一键分享"></a>一键分享</h2><p><a href="https://github.com/overtrue/share.js" target="_blank" rel="noopener">一键分享</a> , 简单易用，直接引用配置即可。</p><h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><p><a href="https://www.tuicool.com/articles/nArEni" target="_blank" rel="noopener">Hexo 博客功能扩展 - 添加回滚到顶部按钮</a></p><h2 id="浏览量"><a href="#浏览量" class="headerlink" title="浏览量"></a>浏览量</h2><p>此处不做说明，需要注册提供统计功能的服务, 注册后直接使用即可。网上很多服务提供者有对应功能。<br>百度统计，谷歌统计，不蒜子统计，cnzz, leancloud 等等。</p><p>本站采用的为 <a href="https://valine.js.org/" target="_blank" rel="noopener">Valine一款基于Leancloud的快速、简洁且高效的无后端评论系统</a>, 只用了其中的<code>文章阅读量统计</code>模块，评论系统采用的 <code>gitalk</code>, 原因是当时配置完评论系统后发现无法及时的接受通知，博主和评论者无法及时互联，发邮件有限制。所以切换了评论插件。不过后续发现 <a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin-Valine评论系统的扩展和增强</a> 实现评论邮件通知、评论管理、垃圾评论过滤等功能。可以对其进行修改增强即可。</p><p>具体 <code>Valine</code> 如何配置，详情参考的为 <a href="https://godbmw.com/passages/2018-11-15-theme-bmw-docs-zh/#4.%20%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%20&amp;&amp;%20%E6%96%87%E7%AB%A0%E7%BB%9F%E8%AE%A1" target="_blank" rel="noopener">Theme-BMW 中文文档, 本站博客主题</a>，前人栽树后人乘凉，O(∩_∩)O哈哈~, 如果为其它主题，参考 Valine 官网即可。</p><p>补充说明：主题提供的 <code>文章统计</code> 暂时只有文章的浏览量，本站对代码就行了修改添加，支持总的 <code>浏览量展示</code>。原理为将所有浏览量相加，且对分类，标签，归档，首页，等模块纳入了统计范围，综合即为 <code>网站浏览量</code>。</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p>可以向各个搜索引擎提交自己的网站</p><ul><li><a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度入口</a></li><li><a href="https://www.google.com/webmasters/tools/submit-url?pli=1" target="_blank" rel="noopener">谷歌入口</a></li><li><a href="http://info.so.360.cn/site_submit.html" target="_blank" rel="noopener">360入口</a></li><li><a href="http://fankui.help.sogou.com/index.php/web/web/index?type=4" target="_blank" rel="noopener">搜狗入口</a></li><li><a href="https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired" target="_blank" rel="noopener">必应入口</a></li></ul><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>npm install <a href="https://github.com/amlove2/hexo-generator-topindex" target="_blank" rel="noopener">hexo-generator-topindex</a> –save</p><p>设置 <code>top</code> 参数, 值越大，优先级越高</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-12</span> <span class="number">19</span><span class="string">:45:02</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="站内搜素"><a href="#站内搜素" class="headerlink" title="站内搜素"></a>站内搜素</h2><p>待补充，标签图标，更多按钮，背景图 forkmegithub</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;hexo&lt;/code&gt; 搭建博客且主题配置后，是否想让自己的博客更加精致那？例如：评论功能，文章字数统计和阅读时长，图片预览，鼠标点击效果，添加可爱的二次元，音乐播放，RSS, 分享， 浏览量统计，搜索，等等，本文主要记录此模块内容。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="hexo-功能配置" scheme="http://yoursite.com/tags/hexo-%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>k8s 命令备忘</title>
    <link href="http://yoursite.com/passages/k8s%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://yoursite.com/passages/k8s命令备忘/</id>
    <published>2018-12-17T04:00:00.000Z</published>
    <updated>2019-01-18T12:09:54.768Z</updated>
    
    <content type="html"><![CDATA[<p><code>k8s</code> 命令备忘</p><a id="more"></a><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><blockquote><p><code>kubectl</code> 用于运行 <code>Kubernetes</code> 集群命令的管理工具</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>kubectl [command] [TYPE] [NAME] [flags]</p></blockquote><ul><li>command：指定要在一个或多个资源执行的操作，例如操作 create，get，describe，delete。</li><li>TYPE：指定资源类型 Resource types。Resource types会区分大小写，也可以指定单数，复数或缩写的形式。</li><li>NAME：指定 Resource 的 Name。Name区分大小写，如果省略Name，则显示所有资源的详细信息</li><li>flags：指定可选flags。例如，你可以使用-s 或 –server flag来指定 Kubernetes API Server 的地址和端口。提示：命令行指定的flags将覆盖默认值和任何相应的环境变量。</li></ul><h2 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 通过配置文件名创建一个集群资源对象, 支持JSON和YAML格式的文件</span></span><br><span class="line">kubectl create -f FILENAME</span><br><span class="line"></span><br><span class="line"><span class="section"># 对文件或stdin的资源进行配置更改。</span></span><br><span class="line">kubectl apply -f FILENAME</span><br><span class="line"></span><br><span class="line"><span class="section"># 根据配置文件、目录或指定的literal-value创建configmap</span></span><br><span class="line">kubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run]</span><br><span class="line">kubectl create configmap my-config --from-file=path/to/bar</span><br><span class="line"></span><br><span class="line"><span class="section"># 创建一个具有指定名称的namespace</span></span><br><span class="line">kubectl create namespace NAME [--dry-run]</span><br><span class="line">kubectl create namespace my-namespace</span><br><span class="line"></span><br><span class="line"><span class="section"># 通过配置文件名、stdin、资源名称或label选择器来删除资源。</span></span><br><span class="line">kubectl delete ([-f FILENAME] | TYPE [(NAME | -l label | --all)])</span><br><span class="line">kubectl delete -f ./pod.json</span><br><span class="line">kubectl delete pod,service baz foo</span><br><span class="line">kubectl delete po &lt;podname&gt; -n namespace</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取列出一个或多个资源的信息。</span></span><br><span class="line">kubectl get po</span><br><span class="line">kubectl get rc,services</span><br><span class="line"></span><br><span class="line"><span class="section"># 显示一个或多个resources的详细状态</span></span><br><span class="line">kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | /NAME | -l label]) [flags]</span><br><span class="line">kubectl describe &lt;podname&gt; bash -n namespace</span><br><span class="line"></span><br><span class="line"><span class="section"># 对pod中的容器执行命令</span></span><br><span class="line"><span class="section"># Get a shell to the running Container</span></span><br><span class="line">kubectl exec POD [-c CONTAINER] [-i] [-t] [flags] [-- COMMAND [args...]]</span><br><span class="line">kubectl exec -it &lt;podname&gt; bash -n namespace</span><br><span class="line"></span><br><span class="line"><span class="section"># 输出pod中一个容器的日志</span></span><br><span class="line">kubectl logs [-f] [-p] POD [-c CONTAINER]</span><br><span class="line">kubectl logs &lt;podname&gt; bash -n namespace</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">Kubernetes中文社区 | 中文文档</a></li><li><a href="https://www.kubernetes.org.cn/docs" target="_blank" rel="noopener">Kubernetes中文手册</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;k8s&lt;/code&gt; 命令备忘&lt;/p&gt;
    
    </summary>
    
      <category term="工程部署" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
      <category term="kubectl" scheme="http://yoursite.com/tags/kubectl/"/>
    
  </entry>
  
  <entry>
    <title>k8s 各模块关系</title>
    <link href="http://yoursite.com/passages/k8s%E5%90%84%E6%A8%A1%E5%9D%97%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/passages/k8s各模块关系/</id>
    <published>2018-12-07T04:00:00.000Z</published>
    <updated>2019-01-21T14:32:50.980Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍 <code>k8s</code> 各模块关系</p><a id="more"></a><h2 id="关与-Kubernetes"><a href="#关与-Kubernetes" class="headerlink" title="关与 Kubernetes"></a>关与 <strong>Kubernetes</strong></h2><blockquote><p><code>Kubernetes</code> 是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。<br><code>Kubernetes</code> 的名字来自希腊语，意思是“舵手” 或 “领航员”。K8s是将8个字母“ubernete”替换为“8”的缩写。</p></blockquote><h2 id="各模块关系图"><a href="#各模块关系图" class="headerlink" title="各模块关系图"></a>各模块关系图</h2><p><img src="/images/k8s.png"></p><h2 id="Kubernetes-Pod-概述"><a href="#Kubernetes-Pod-概述" class="headerlink" title="Kubernetes Pod 概述"></a><strong>Kubernetes Pod</strong> 概述</h2><blockquote><p><code>Pod</code> 是 <code>Kubernetes</code> 创建或部署的最小/最简单的基本单位，一个 <code>Pod</code> 代表集群上正在运行的一个进程。</p></blockquote><blockquote><p>创建 <code>Deployment</code> 时，<code>Kubernetes</code> 会创建了一个 <code>Pod</code> 来托管应用。<code>Pod</code> 是 <code>Kubernetes</code> 中一个抽象化概念，由一个或多个容器组合在一起得共享资源<br><code>Pod</code> 代表部署的一个单位：<code>Kubernetes</code> 中单个应用的实例，它可能由单个容器或多个容器共享组成的资源。</p></blockquote><h2 id="Kubernetes-Replica-Sets-概述"><a href="#Kubernetes-Replica-Sets-概述" class="headerlink" title="Kubernetes Replica Sets 概述"></a><strong>Kubernetes Replica Sets</strong> 概述</h2><blockquote><p><code>ReplicaSet（RS）</code> 是 <code>Replication Controller（RC）</code> 的升级版本。</p></blockquote><blockquote><p>主要被 <code>Deployments</code> 用作 <code>pod</code> 机制的创建、删除和更新。当使用 <code>Deployment</code> 时，你不必担心创建 <code>pod</code> 的 <code>ReplicaSets</code>，因为可以通过 <code>Deployment</code> 实现管理 <code>ReplicaSets</code></p></blockquote><h2 id="Kubernetes-Deployment-概述"><a href="#Kubernetes-Deployment-概述" class="headerlink" title="Kubernetes Deployment 概述"></a><strong>Kubernetes Deployment</strong> 概述</h2><blockquote><p><code>Deployment</code> 为 <code>Pod</code> 和 <code>Replica Set</code>（升级版的 Replication Controller）提供声明式更新。</p></blockquote><blockquote><p>负责创建和更新应用，应用实例创建完成后，<code>Kubernetes Deployment Controller</code> 会持续监视这些实例。如果管理实例的节点被关闭或删除，那么 <code>Deployment Controller</code> 将会替换它们，实现自我修复能力。</p></blockquote><h2 id="Kubernetes-Service-概述"><a href="#Kubernetes-Service-概述" class="headerlink" title="Kubernetes Service 概述"></a><strong>Kubernetes Service</strong> 概述</h2><blockquote><p><code>Kubernetes Service</code> 定义了这样一种抽象：一个 <code>Pod</code> 的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组 Pod 能够被 Service 访问到，</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">Kubernetes中文社区|中文文档</a>  </li><li><a href="http://docs.kubernetes.org.cn/683.html" target="_blank" rel="noopener">Kubernetes kubectl 命令表</a></li><li><a href="https://blog.csdn.net/ucsheep/article/details/81781509" target="_blank" rel="noopener">k8s(Kubernetes)中Pod,Deployment,ReplicaSet,Service之间关系分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍 &lt;code&gt;k8s&lt;/code&gt; 各模块关系&lt;/p&gt;
    
    </summary>
    
      <category term="工程部署" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
      <category term="Deployment/ReplicaSet/Service/pod" scheme="http://yoursite.com/tags/Deployment-ReplicaSet-Service-pod/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://yoursite.com/passages/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/passages/linux常用命令/</id>
    <published>2018-12-06T04:00:00.000Z</published>
    <updated>2019-01-18T12:09:54.770Z</updated>
    
    <content type="html"><![CDATA[<p><code>linux</code> 常用命令备忘</p><a id="more"></a><h1 id="新手常用的linux命令"><a href="#新手常用的linux命令" class="headerlink" title="新手常用的linux命令"></a>新手常用的linux命令</h1><blockquote><p>命令名称 [命令参数] [命令对象]</p></blockquote><p>注意，命令名称、命令参数、命令对象之间请用空格键分隔。</p><p>命令对象一般是指要处理的文件、目录、用户等资源，而命令参数可以用长格式（完整的选项名称），也可以用短格式（单个字母的缩写），两者分别用–与-作为前缀。</p><p>命令参数的长格式与短格式示例<br>长格式 <code>man --help</code><br>短格式 <code>man -h</code></p><h2 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># echo命令用于在shell中打印shell变量的值，或者直接输出指定的字符串</span></span><br><span class="line">echo 命令: echo(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># date命令是显示或设置系统时间与日期。</span></span><br><span class="line">date 命令: date(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># reboot命令用来重新启动正在运行的Linux操作系统。</span></span><br><span class="line">reboot 命令: reboot(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># poweroff命令用来关闭计算机操作系统并且切断系统电源。</span></span><br><span class="line">poweroff 命令: poweroff(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># wget命令用来从指定的URL下载文件</span></span><br><span class="line">wget 命令: wget(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># ps命令用于报告当前系统的进程状态。</span></span><br><span class="line">ps 命令: ps(选项) ps -ef | grep ""</span><br><span class="line"></span><br><span class="line"><span class="section"># top命令可以实时动态地查看系统的整体运行情况，</span></span><br><span class="line">top 命令: top(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># pidof命令用于查找指定名称的进程的进程号id号。</span></span><br><span class="line">pidof 命令: pidof(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># kill命令用来删除执行中的程序或工作 kill -9 进程 强制删除</span></span><br><span class="line">kill 命令: kill(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># killall命令使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程</span></span><br><span class="line">killall 命令</span><br></pre></td></tr></table></figure><p>如果我们在系统终端中执行一个命令后想立即停止它，可以同时按下Ctrl + C组合键（生产环境中比较常用的一个快捷键），这样将立即终止该命令的进程。或者，如果有些命令在执行时不断地在屏幕上输出信息，影响到后续命令的输入，则可以在执行命令时在末尾添加上一个&amp;符号，这样命令将进入系统后台来执行。</p><h2 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ifconfig命令被用于配置和显示Linux内核中网络接口的网络参数</span></span><br><span class="line">ifconfig 命令: ifconfig(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># uname命令用于打印当前系统相关信息</span></span><br><span class="line">uname 命令: uname(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># uptime命令能够打印系统总共运行了多长时间和系统的平均负载。</span></span><br><span class="line">uptime 命令: uptime(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># free命令可以显示当前系统未使用的和已使用的内存数目，显示被内核使用的内存缓冲区。</span></span><br><span class="line">free 命令: free(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># who命令是显示目前登录系统的用户信息</span></span><br><span class="line">who 命令: who(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># last命令用于显示用户最近登录信息</span></span><br><span class="line">last 命令: last(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># history命令用于显示指定数目的指令命令</span></span><br><span class="line">history 命令: history(选项)(参数)</span><br></pre></td></tr></table></figure><h2 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 以绝对路径的方式显示用户当前工作目录</span></span><br><span class="line">pwd 命令: pwd（选项）</span><br><span class="line"></span><br><span class="line"><span class="section"># cd命令用来切换工作目录至dirname</span></span><br><span class="line">cd 命令: cd (选项) (参数)  </span><br><span class="line"></span><br><span class="line"><span class="section"># ls命令用来显示目标列表</span></span><br><span class="line">ls 命令: ls（选项）（参数）</span><br></pre></td></tr></table></figure><h2 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># cat命令连接文件并打印到标准输出设备上，cat经常用来显示文件的内容，</span></span><br><span class="line">cat 命令: cat(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容</span></span><br><span class="line"><span class="section"># more名单中内置快捷键，H-获得帮助信息，Enter-向下翻滚一行，空格-向下滚动一屏，Q-退出命令。</span></span><br><span class="line">more 命令: more(语法)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># head命令用于显示文件的开头的内容</span></span><br><span class="line"><span class="section"># 默认情况下，head命令显示文件的头10行内容。</span></span><br><span class="line">head 命令: head(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># tail命令用于输入文件中的尾部内容。</span></span><br><span class="line"><span class="section"># tail命令默认在屏幕上显示指定文件的末尾10行</span></span><br><span class="line">tail 命令: tail(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># tr命令可以对来自标准输入的字符进行替换、压缩和删除</span></span><br><span class="line">tr 命令: tr(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># wc命令用来计算数字。</span></span><br><span class="line">wc 命令: wc(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># stat命令用于显示文件的状态信息。</span></span><br><span class="line">stat 命令: stat(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># cut命令用来显示行中的指定部分，删除文件中指定字段。</span></span><br><span class="line">cut 命令: cut(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># diff命令在最简单的情况下，比较给定的两个文件的不同</span></span><br><span class="line">diff 命令: diff(选项)(参数)</span><br></pre></td></tr></table></figure><h2 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式）</span></span><br><span class="line"><span class="section"># 二是用来创建新的空文件</span></span><br><span class="line">touch 命令: touch(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># mkdir命令用来创建目录</span></span><br><span class="line">mkdir 命令: mkdir (选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># cp命令用来将一个或多个源文件或者目录复制到指定的目的文件或目录。</span></span><br><span class="line">cp 命令: cp(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># mv命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。</span></span><br><span class="line">mv 命令: mv(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># rm命令可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。</span></span><br><span class="line">rm 命令: rm (选项)(参数)  rm -rf (参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># dd命令用于复制文件并对原文件的内容进行转换和格式化处理</span></span><br><span class="line">dd 命令: dd(选项)</span><br><span class="line"></span><br><span class="line"><span class="section"># file命令用来探测给定文件的类型。</span></span><br><span class="line"><span class="section"># file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程。</span></span><br><span class="line">file 命令: file(选项)(参数)</span><br></pre></td></tr></table></figure><h2 id="打包压缩与搜索命令"><a href="#打包压缩与搜索命令" class="headerlink" title="打包压缩与搜索命令"></a>打包压缩与搜索命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># tar命令可以为linux的文件和目录创建档案。</span></span><br><span class="line">tar 命令: tar(选项)(参数)</span><br><span class="line"></span><br><span class="line"><span class="section"># grep是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</span></span><br><span class="line"><span class="section"># grep match_pattern file_name  cat file_name | grep "text"</span></span><br><span class="line">grep 命令</span><br><span class="line"></span><br><span class="line"><span class="section"># find命令用来在指定目录下查找文件。</span></span><br><span class="line">find 命令: find(选项)(参数)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全(手册)_Linux常用命令行实例详解_Linux命令学习手册</a></li><li><a href="https://www.cnblogs.com/yjd_hycf_space/p/7730690.html" target="_blank" rel="noopener">Linux常用命令大全</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;linux&lt;/code&gt; 常用命令备忘&lt;/p&gt;
    
    </summary>
    
      <category term="工程部署" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>pm2学习</title>
    <link href="http://yoursite.com/passages/pm2%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/passages/pm2学习/</id>
    <published>2018-12-05T04:00:00.000Z</published>
    <updated>2019-01-21T12:56:49.667Z</updated>
    
    <content type="html"><![CDATA[<p><code>pm2</code> 基础学习</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>PM2</code> 是 <code>nodejs进程</code> 管理工具，内置负载均衡。它可以帮助您保持Node应用程序永久活动，重起这些node应用程序也不需要停机，并简化常见的系统管理任务。</p><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>内建负载均衡（使用Node cluster 集群模块）</li><li>后台运行</li><li>0秒停机重载–pm2 reload</li><li>具有Ubuntu和CentOS 的启动脚本, windows 则可用 pm2-windows-startup</li><li>控制台检测–pm2 monit</li></ul><blockquote><p>上面特性已体验，下面暂未体验到</p></blockquote><ul><li>停止不稳定的进程（避免无限循环）</li><li>提供 HTTP API</li><li>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 全局安装</span></span><br><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># start and add a process to your list</span></span><br><span class="line">pm2 start app.js</span><br><span class="line"></span><br><span class="line"><span class="section"># show your list</span></span><br><span class="line">pm2 ls</span><br><span class="line"></span><br><span class="line"><span class="section"># stop and delete a process from the list</span></span><br><span class="line"><span class="section"># Default process name is the filename without .js (eg: app for app.js).</span></span><br><span class="line"><span class="section"># Use --name or -n to change.</span></span><br><span class="line">pm2 delete app</span><br><span class="line"></span><br><span class="line"><span class="section"># stop the process (kill the process but keep it in the process list)</span></span><br><span class="line">pm2 stop app</span><br><span class="line"></span><br><span class="line"><span class="section"># start the process</span></span><br><span class="line">pm2 start app</span><br><span class="line"></span><br><span class="line"><span class="section"># both stop and start</span></span><br><span class="line">pm2 restart app</span><br><span class="line"></span><br><span class="line"><span class="section"># Use reload instead of restart for 0-seconds downtime reloads:</span></span><br><span class="line">pm2 reload app</span><br><span class="line"></span><br><span class="line"><span class="section"># Managing apps is straightforward:</span></span><br><span class="line">pm2 stop     &lt;app_name|id|'all'|json_conf&gt;</span><br><span class="line">pm2 restart  &lt;app_name|id|'all'|json_conf&gt;</span><br><span class="line">pm2 delete   &lt;app_name|id|'all'|json_conf&gt;</span><br><span class="line"></span><br><span class="line"><span class="section"># To have more details on a specific application:</span></span><br><span class="line">pm2 describe &lt;id|app_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="section"># To monitor logs, custom metrics, application information:</span></span><br><span class="line">pm2 monit</span><br><span class="line"></span><br><span class="line"><span class="section"># logs</span></span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"><span class="section"># PM2 can generates and configure a Startup Script to keep PM2 and your processes alive at every server restart.</span></span><br><span class="line"><span class="section"># PM2可以生成和配置启动脚本，以在每次服务器重新启动时保持PM2和您的进程活动。</span></span><br><span class="line">$ pm2 startup   # Generate Startup Script</span><br><span class="line">$ pm2 save      # Freeze your process list across server restart</span><br><span class="line">$ pm2 unstartup # Remove Startup Script</span><br><span class="line"></span><br><span class="line"><span class="section"># Updating PM2</span></span><br><span class="line">$ npm install pm2@latest -g  # Install latest PM2 version</span><br><span class="line">$ pm2 update                 # Save process list, exit old PM2 &amp; restore all processes</span><br></pre></td></tr></table></figure><h2 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 后台运行pm2，启动4个app.js</span></span><br><span class="line"><span class="section"># 也可以把'max' 参数传递给 start</span></span><br><span class="line"><span class="section"># 正确的进程数目依赖于Cpu的核心数目</span></span><br><span class="line">$ pm2 start app.js -i 4</span><br><span class="line"><span class="section"># 命名进程</span></span><br><span class="line">$ pm2 start app.js --name my-api</span><br><span class="line"><span class="section"># 显示所有进程状态</span></span><br><span class="line">$ pm2 list</span><br><span class="line"><span class="section"># 监视所有进程</span></span><br><span class="line">$ pm2 monit</span><br><span class="line"><span class="section"># 显示所有进程日志</span></span><br><span class="line">$ pm2 logs</span><br><span class="line"><span class="section"># 停止所有进程</span></span><br><span class="line">$ pm2 stop all</span><br><span class="line"><span class="section"># 重启所有进程</span></span><br><span class="line">$ pm2 restart all</span><br><span class="line"><span class="section"># 0秒停机重载进程</span></span><br><span class="line">$ pm2 reload all</span><br><span class="line"><span class="section"># 停止指定的进程</span></span><br><span class="line">$ pm2 stop 0</span><br><span class="line"><span class="section"># 重启指定的进程</span></span><br><span class="line">$ pm2 restart 0</span><br><span class="line"><span class="section"># 产生init脚本保持进程活着</span></span><br><span class="line">$ pm2 startup</span><br><span class="line"><span class="section"># 运行健壮的 computer API endpoint (http:#localhost:9615)</span></span><br><span class="line">$ pm2 web</span><br><span class="line"><span class="section"># 杀死指定的进程</span></span><br><span class="line">$ pm2 delete 0</span><br><span class="line"><span class="section"># 杀死全部进程</span></span><br><span class="line">$ pm2 delete all</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#运行进程的不同方式：</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 根据有效CPU数目启动最大进程数目</span></span><br><span class="line">$ pm2 start app.js -i max</span><br><span class="line"><span class="section"># 启动3个进程</span></span><br><span class="line">$ pm2 start app.js -i 3</span><br><span class="line"><span class="section"># 用fork模式启动app.js而不是使用 cluster</span></span><br><span class="line">$ pm2 start app.js -x</span><br><span class="line"><span class="section"># 用fork模式启动 app.js 并且传递参数 (-a 23)</span></span><br><span class="line">$ pm2 start app.js -x -- -a 23</span><br><span class="line"><span class="section"># 启动一个进程并把它命名为 serverone</span></span><br><span class="line">$ pm2 start app.js --name serverone</span><br><span class="line"><span class="section"># 停止 serverone 进程</span></span><br><span class="line">$ pm2 stop  serverone</span><br><span class="line"><span class="section"># 启动进程, 在 app.json里设置选项</span></span><br><span class="line">$ pm2 start app.json</span><br><span class="line"><span class="section"># 在--之后给 app.js 传递参数</span></span><br><span class="line">$ pm2 start app.js -i max -- -a 23</span><br><span class="line"><span class="section"># 启动 并 生成一个配置文件</span></span><br><span class="line">$ pm2 start app.js -i max -e err.log -o out.log</span><br><span class="line"><span class="section">#你也可以执行用其他语言编写的app(fork模式):</span></span><br><span class="line">$ pm2 start my-bash-script.sh -x --interpreter bash</span><br><span class="line">$ pm2 start my-python-script.py -x --interpreter python</span><br><span class="line"></span><br><span class="line"><span class="section">#集群模式：Node.js负载平衡和零停机重新加载</span></span><br><span class="line">$ pm2 start api.js -i &lt;processes&gt; # 以集群模式启动Node.js应用程序，该应用程序将利用所有可用的CPU：</span><br><span class="line">$ pm2 reload all # Zero Downtime Reload</span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>pm2 reload all # 常用于在集群模式(cluster mode)下，保持应用不停(Zero Downtime Reload)</p><p>pm2 startup # 开机启动，windows使用不行，推荐 <a href="https:#www.npmjs.com/package/pm2-windows-startup" target="_blank" rel="noopener">pm2-windows-startup</a> 配合实现对应效果</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener">npm-pm2</a></li><li><a href="https://pm2.io/doc/en/runtime/overview/?utm_source=pm2&amp;utm_medium=website&amp;utm_campaign=rebranding" target="_blank" rel="noopener">pm2-官网</a></li><li><a href="https://www.npmjs.com/package/pm2-windows-startup" target="_blank" rel="noopener">npm-pm2-windows-startup</a></li><li><a href="https://www.douban.com/note/314200231/" target="_blank" rel="noopener">PM2 介绍</a></li><li><a href="https://cloud.tencent.com/developer/article/1348819" target="_blank" rel="noopener">pm2常用命令</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;pm2&lt;/code&gt; 基础学习&lt;/p&gt;
    
    </summary>
    
      <category term="工程部署" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="pm2" scheme="http://yoursite.com/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>web 页面加载、解析、渲染过程</title>
    <link href="http://yoursite.com/passages/web%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E3%80%81%E8%A7%A3%E6%9E%90%E3%80%81%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/passages/web页面加载、解析、渲染过程/</id>
    <published>2018-11-26T04:00:00.000Z</published>
    <updated>2019-01-18T12:09:54.782Z</updated>
    
    <content type="html"><![CDATA[<p><code>web</code> 页面加载、解析、渲染过程</p><a id="more"></a><h2 id="浏览器输入url到页面渲染"><a href="#浏览器输入url到页面渲染" class="headerlink" title="浏览器输入url到页面渲染"></a>浏览器输入url到页面渲染</h2><ol><li>用户输入URL地址</li><li>浏览器查询缓存，若有缓存，直接展示</li><li>浏览器解析URL解析出主机名</li><li><p>浏览器将主机名转换为服务器ip地址</p><p> 先查找本地DNS缓存，若没有，向浏览器默认DNS服务器发送查询请求，同时缓存</p></li><li>浏览器将端口号从URL解析出</li><li>浏览器向服务器发送TCP连接，三次握手</li><li>浏览器向服务器发送HTTP请求，请求数据包</li><li>服务器向浏览器返回HTTP响应，响应报文</li><li>关闭连接，浏览器解析文档，解析成DOM树，解析CSS样式，渲染页面</li></ol><h2 id="DOM和JavaScript的关系"><a href="#DOM和JavaScript的关系" class="headerlink" title="DOM和JavaScript的关系"></a>DOM和JavaScript的关系</h2><blockquote><p><code>文档对象模型(DOM)</code> 是一个独立于语言，用于操作 XML 和 HTML 文档的 API.</p></blockquote><p>DOM是一个与语言无关的API，别的语言也可以实现操作DOM的具体api，但是它在浏览器中是用JavaScript来实现的，因此，DOM是现在JavaScript编码中很重要的一部分，因为JavaScript很多时候都在操作底层文档。</p><h2 id="操作DOM会很慢"><a href="#操作DOM会很慢" class="headerlink" title="操作DOM会很慢"></a>操作DOM会很慢</h2><p>DOM 和 JavaScript 是独立实现的，通过 js 操作 dom, 需要先连接，然后进行操作。<br>次数多，则操作会很慢</p><h2 id="网页生成过程"><a href="#网页生成过程" class="headerlink" title="网页生成过程"></a>网页生成过程</h2><p><img src="/images/网页渲染过程.png"></p><ol><li>将HTML构建成一个<code>DOM树</code>(Document Object Model 文档对象模型)</li><li>将CSS构造<code>CSSOM树</code>(CSS Object Model CSS对象模型)</li><li><p>根据DOM树和CSSOM来构造 <code>Rendering Tree</code>(渲染树）</p><p> 注意：Rendering Tree 渲染树并不等同于 DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。</p></li><li>生成<code>布局(layout)</code>，计算出每个节点在屏幕中的位置</li><li>将布局<code>绘制（paint）</code>在屏幕上</li></ol><blockquote><p>“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”(render）,耗时较多</p></blockquote><p><img src="/images/渲染.png"></p><h2 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h2><blockquote><p><code>Reflow（回流/重排）</code>：当它发现了某个部分发生了变化影响了布局，渲染树需要重新计算。</p></blockquote><blockquote><p><code>Repaint（重绘）</code>: 根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排</p></blockquote><p>重排一定会引起重绘，而重绘不一定会引起重排</p><h3 id="reflow原因"><a href="#reflow原因" class="headerlink" title="reflow原因"></a>reflow原因</h3><ul><li>页面初始渲染</li><li>浏览器窗口大小发生改变</li><li>添加/删除可见DOM元素</li><li>改变元素位置</li><li>改变元素尺寸（宽、高、内外边距、边框等）</li><li>改变元素内容（文本或图片等）</li><li>元素字体大小变化</li><li>添加或者删除可见的DOM元素</li><li>激活CSS伪类（例如：:hover）</li><li>设置style属性(例如：width/height 等)</li><li>查询某些属性或调用某些方法(例如：scrollIntoViewIfNeeded())</li></ul><h3 id="避免reflow"><a href="#避免reflow" class="headerlink" title="避免reflow"></a>避免reflow</h3><ol><li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作</li><li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排</li><li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式</li><li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。<br> 比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li><li>先将元素设为display: none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染</li><li>position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li><li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility:hidden的元素只对重绘有影响，不影响重排</li><li>使用虚拟DOM的脚本库，比如React等</li><li>使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染</li><li>少用table, table元素的重排和重绘成本，要高于div元素</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;web&lt;/code&gt; 页面加载、解析、渲染过程&lt;/p&gt;
    
    </summary>
    
      <category term="页面加载" scheme="http://yoursite.com/categories/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD/"/>
    
    
      <category term="页面加载/页面解析/页面渲染" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD-%E9%A1%B5%E9%9D%A2%E8%A7%A3%E6%9E%90-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
    
      <category term="重排" scheme="http://yoursite.com/tags/%E9%87%8D%E6%8E%92/"/>
    
      <category term="重绘" scheme="http://yoursite.com/tags/%E9%87%8D%E7%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 状态码</title>
    <link href="http://yoursite.com/passages/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://yoursite.com/passages/HTTP状态码/</id>
    <published>2018-11-21T02:00:00.000Z</published>
    <updated>2019-01-21T14:32:39.055Z</updated>
    
    <content type="html"><![CDATA[<p><code>HTTP Status Code</code> 简单知识</p><a id="more"></a><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。<br>当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><h3 id="1"><a href="#1" class="headerlink" title="1**"></a>1**</h3><p><code>信息，服务器收到请求，需要请求者继续执行操作</code></p><ul><li>100: Continue, 继续. 客户端应继续其请求</li></ul><h3 id="2"><a href="#2" class="headerlink" title="2**"></a>2**</h3><p><code>成功，操作被成功接收并处理</code></p><ul><li>200: OK, 请求成功. 一般用于GET与POST请求</li><li>204: No Content, 无内容. 服务器成功处理，但未返回内容。</li><li>205: Reset Content, 重置内容. 服务器处理成功，用户终端（例如：浏览器）应重置文档视图</li></ul><h3 id="3"><a href="#3" class="headerlink" title="3**"></a>3**</h3><p><code>重定向，需要进一步的操作以完成请求</code></p><ul><li>301: Moved Permanently, 永久移动. 请求的资源已被永久的移动到新URI</li><li>302: Found, 临时移动。与301类似。但资源只是临时被移动</li><li>304: Not Modified, 未修改。所请求的资源未修改，服务器不会返回任何资源,使用缓存</li><li>307: Temporary Redirect, 临时重定向。与302类似。使用GET请求重定向</li></ul><h3 id="4"><a href="#4" class="headerlink" title="4**"></a>4**</h3><p><code>客户端错误，请求包含语法错误或无法完成请求</code></p><ul><li>400: Bad Request, 客户端请求的语法错误，服务器无法理解</li><li>401: Unauthorized 请求要求用户的身份认证</li><li>403: Forbidden, 服务器理解请求客户端的请求，但是拒绝执行此请求</li><li>404: Not Found, 服务器无法根据客户端的请求找到资源（网页）</li><li>405: Method Not Allowed, 客户端请求中的方法被禁止</li><li>408: Request Time-out, 服务器等待客户端发送的请求时间过长，超时</li><li>414: Request-URI Too Large, 请求的URI过长（URI通常为网址），服务器无法处理</li></ul><h3 id="5"><a href="#5" class="headerlink" title="5**"></a>5**</h3><p><code>服务器错误，服务器在处理请求的过程中发生了错误</code></p><ul><li>500: Internal Server Error, 服务器内部错误，无法完成请求</li><li>501: Not Implemented, 服务器不支持请求的功能，无法完成请求</li><li>502: Bad Gateway, 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li>503: Service Unavailable, 由于超载或系统维护，服务器暂时的无法处理客户端的请求</li><li>504: Gateway Time-out, 充当网关或代理的服务器，未及时从远端服务器获取请求</li><li>505: HTTP Version not supported, 服务器不支持请求的HTTP协议的版本，无法完成处理</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;HTTP Status Code&lt;/code&gt; 简单知识&lt;/p&gt;
    
    </summary>
    
      <category term="请求" scheme="http://yoursite.com/categories/%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="HTTP Status Code" scheme="http://yoursite.com/tags/HTTP-Status-Code/"/>
    
  </entry>
  
  <entry>
    <title>Get 与 Post 区别</title>
    <link href="http://yoursite.com/passages/get%E4%B8%8Epost%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/passages/get与post区别/</id>
    <published>2018-11-20T08:00:00.000Z</published>
    <updated>2019-01-21T14:13:27.709Z</updated>
    
    <content type="html"><![CDATA[<p><code>Get</code> 与 <code>POST</code> 的区别</p><a id="more"></a><h2 id="什么是-HTTP"><a href="#什么是-HTTP" class="headerlink" title="什么是 HTTP ?"></a>什么是 HTTP ?</h2><blockquote><p>超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。<br>HTTP 的工作方式是客户机与服务器之间的请求-应答协议。<br>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。<br>举例：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p></blockquote><h2 id="HTTP请求方法：GET-和-POST"><a href="#HTTP请求方法：GET-和-POST" class="headerlink" title="HTTP请求方法：GET 和 POST"></a>HTTP请求方法：GET 和 POST</h2><ul><li>GET - 从指定的资源请求数据。</li><li>POST - 向指定的资源提交要被处理的数据</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><code>GET</code> 参数通过 url 传递，<code>POST</code> 放在 request body中</li><li><code>GET</code> 请求在URL中传送的参数是有长度限制的(2048 个字符)，而 <code>POST</code> 没有</li><li><code>GET</code> 比 <code>post</code> 更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息</li><li><code>GET</code> 请求只能进行url编码，而 <code>POST</code> 支持多种编码方式</li><li><code>GET</code> 请求会被浏览器主动cache，而 <code>POST</code> 不会，除非手动设置</li><li><code>GET</code> 请求参数会被完整保留在浏览器历史记录里，而 <code>POST</code> 中的参数不会被保留</li><li><code>GET</code> 在浏览器回退时是无害的，而 <code>POST</code> 会再次提交请求</li><li><code>GET</code> 只接受ASCII字符的参数的数据类型，，而 <code>POST</code> 没有限制</li><li><code>GET</code> 产生的URL地址可以被Bookmark-书签，而 <code>POST</code> 不可以。</li></ul><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><ul><li><code>GET</code> 和 <code>POST</code> 本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</li><li><p><code>GET</code> 产生一个TCP数据包, <code>POST</code> 产生两个TCP数据包。</p><ul><li>对于 <code>GET</code> 方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</li><li>对于 <code>POST</code>，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在 <code>POST</code> 中发送两次包，Firefox就只发送一次。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Get&lt;/code&gt; 与 &lt;code&gt;POST&lt;/code&gt; 的区别&lt;/p&gt;
    
    </summary>
    
      <category term="请求" scheme="http://yoursite.com/categories/%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="Get" scheme="http://yoursite.com/tags/Get/"/>
    
      <category term="Post" scheme="http://yoursite.com/tags/Post/"/>
    
  </entry>
  
  <entry>
    <title>create脚手架使用antd(开启less,css module,定制主题)</title>
    <link href="http://yoursite.com/passages/create%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BD%BF%E7%94%A8antd(less,%20css-module,%E4%B8%BB%E9%A2%98)/"/>
    <id>http://yoursite.com/passages/create脚手架使用antd(less, css-module,主题)/</id>
    <published>2018-11-14T08:00:00.000Z</published>
    <updated>2019-01-21T14:32:48.281Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>create-react-app</code> 脚手架开发时, 如何配置 <code>antd</code>, 同时开启 less, css module, 及主题定制</p><a id="more"></a><h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><p>使用 <code>create-react-app</code> 脚手架开发时, 命令 <code>yarn run eject</code> 暴露配置。</p><h2 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h2><p>在暴露出的 <code>webpack.config.dev.js</code> 和 <code>webpack.config.prod.js</code> 中进行配置修改即可。</p><h3 id="antd-按需加载"><a href="#antd-按需加载" class="headerlink" title="antd 按需加载"></a>antd 按需加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install babel-plugin-<span class="keyword">import</span> --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改配置</span></span><br><span class="line"><span class="comment">// Process JS with Babel.</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">  include: paths.appSrc,</span><br><span class="line">  loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    plugins: [ <span class="comment">//增加此配置，注意style:true 动态加载；style:css加载生成后的css文件</span></span><br><span class="line">      [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">    <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">    <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="开启-css-modules-amp-amp-less"><a href="#开启-css-modules-amp-amp-less" class="headerlink" title="开启 css modules &amp;&amp; less"></a>开启 css modules &amp;&amp; less</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install less-loader --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处指定版本是因为less高版本与antd冲突</span></span><br><span class="line">npm install less@<span class="number">2.7</span><span class="number">.3</span> --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理规则从下向上</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(css|less)$/</span>,  <span class="comment">//匹配css或less</span></span><br><span class="line">  exclude: [<span class="regexp">/node_modules/</span>], <span class="comment">//排除node_modules文件夹，避免开启css-module时 antd 冲突</span></span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123; <span class="comment">//开启，且指定localIdentName,类名形式</span></span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">        modules: <span class="literal">true</span>,</span><br><span class="line">        localIdentName: <span class="string">'[name]__[local]__[hash:base64:5]'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="comment">//开启less-loader</span></span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'less-loader'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理规则从下向上</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">  include: [<span class="regexp">/node_modules/</span>], <span class="comment">//针对node_modules, antd</span></span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="comment">//less处理</span></span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'less-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        modifyVars: &#123; <span class="comment">//修改主题</span></span><br><span class="line">          <span class="string">'@primary-color'</span>: <span class="string">'#1DA57A'</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="补充-Javascript-Decorators"><a href="#补充-Javascript-Decorators" class="headerlink" title="补充~Javascript Decorators"></a>补充~Javascript Decorators</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-decorators-legacy --save-dev</span><br></pre></td></tr></table></figure><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><code>package.json</code> 中配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"babel": &#123;</span><br><span class="line">  "presets": [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  "plugins": [</span><br><span class="line">    <span class="string">"transform-decorators-legacy"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><code>webpack</code> 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改webpack.config.dev.js配置文件</span></span><br><span class="line"><span class="comment">//babel-loader plugins中加入”transform-decorators-legacy”</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">  include: paths.appSrc,</span><br><span class="line">  loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">      [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">    <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">    <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;create-react-app&lt;/code&gt; 脚手架开发时, 如何配置 &lt;code&gt;antd&lt;/code&gt;, 同时开启 less, css module, 及主题定制&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="create-react-app" scheme="http://yoursite.com/tags/create-react-app/"/>
    
      <category term="antd" scheme="http://yoursite.com/tags/antd/"/>
    
      <category term="less" scheme="http://yoursite.com/tags/less/"/>
    
      <category term="css-module" scheme="http://yoursite.com/tags/css-module/"/>
    
      <category term="主题配置" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>rap2部署说明</title>
    <link href="http://yoursite.com/passages/rap2%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/passages/rap2部署说明/</id>
    <published>2018-11-12T08:00:00.000Z</published>
    <updated>2019-01-18T12:09:54.774Z</updated>
    
    <content type="html"><![CDATA[<p><code>rap2</code>，阿里前端团队开源接口管理工具RAP第二代，部署说明</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>rap2</code>-阿里前端团队开源接口管理工具RAP第二代</p><p><small style="vertical-align:middle;display:inline-block"><iframe src="https://ghbtns.com/github-btn.html?user=thx&repo=rap2-delos&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=thx&repo=rap2-delos&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=thx&repo=rap2-delos&type=follow&count=false" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="20" style="width:170px;height:20px;  background-color: transparent;"></iframe></small></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="http://rapapi.org/org/index.do" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/thx/RAP" target="_blank" rel="noopener">RAP-github</a></li><li><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">RAP2-github</a></li><li><a href="https://incoder.org/2018/03/27/rap2/" target="_blank" rel="noopener">Api 文档管理系统 RAP2环境搭建</a></li><li><a href="https://github.com/thx/rap2-delos/issues/119" target="_blank" rel="noopener">非官方rap2-delos部署文档</a></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>RAP2</strong> 包含两个组件 客户端：<em><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a></em> 和 服务端：<em><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">rap2-delos</a></em></p><p>部署RAP2需要亲具有Node+Linux+MySQL的运维知识，如果亲对此不是很了解，建议用<a href="http://rap2.taobao.org" target="_blank" rel="noopener">http://rap2.taobao.org</a> 线上版本就可以了。</p><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></li><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node 8.9.4+</a></li><li><a href="https://www.mysql.com/cn/downloads/" target="_blank" rel="noopener">MySQL 5.7+</a></li><li><a href="https://redis.io/download" target="_blank" rel="noopener">Redis 4.0+</a></li><li><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">VS code</a>(非必需)</li></ul><h2 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h2><p>下面先讲述 <code>rap2-delos</code> 服务端部署</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li><code>node</code> 版本升级</li><li><code>mysql</code> 下载安装</li><li><code>redis</code> 下载安装</li><li><code>工程克隆</code> git clone <a href="https://github.com/thx/rap2-delos.git" target="_blank" rel="noopener">https://github.com/thx/rap2-delos.git</a></li><li>导入 <code>VS Code</code> //这里的开发编辑工具推荐，当然你也可以用自己熟悉的开发工具</li></ol><blockquote><p>mysql 下载安装的时候，新手上路可以直接下载 <code>msi</code> 格式的安装包，而不是下载压缩包，不然还需要配置。</p><ul><li><a href="https://www.cnblogs.com/ayyl/p/5978418.html" target="_blank" rel="noopener">参考-MySQL基础知识-安装MySQL</a></li></ul></blockquote><h3 id="Redis-安装说明"><a href="#Redis-安装说明" class="headerlink" title="Redis 安装说明"></a>Redis 安装说明</h3><ol><li><em><a href="https://incoder.org/2018/05/15/linux-build/" target="_blank" rel="noopener">Linux 常用应用安装</a></em></li><li><em><a href="https://www.cnblogs.com/yougmi/p/6119259.html" target="_blank" rel="noopener">Windows 下的 Redis 的启动</a></em></li><li><em><a href="https://jingyan.baidu.com/article/7f766daff725cf4101e1d0d1.html" target="_blank" rel="noopener">windows下安装和启动redis服务</a></em></li></ol><p>说明：按照<strong>windows</strong>下相关操作即可。</p><p>常用命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*启动*/</span></span><br><span class="line">redis-server.exe redis.windows.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">/*新窗口连接*/</span></span><br><span class="line">redis-cli.exe 如果没有改默认配置的端口号</span><br><span class="line">redis-cli.exe -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> 改了端口号</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[13164] 27 Dec 20:57:07.820 # Creating Server TCP listening socket 127.0.0.1:6379*/</span></span><br><span class="line"><span class="comment">//错误解决</span></span><br><span class="line"><span class="number">1.</span> redis-cli.exe</span><br><span class="line"><span class="number">2.</span> shutdown</span><br><span class="line"><span class="number">3.</span> exit</span><br><span class="line"><span class="number">4.</span> redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入mysql命令后执行</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RAP2_DELOS_APP <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>目录：rap2-delos/src/config</li><li>文件：config.dev.ts;其中dev，表示开发环境，其他同理</li><li>修改：config.dev.ts文件中db对象中username，password参数与本地或者开发环境的数据库信息匹配</li></ul><h3 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h3><ol><li><code>npm install</code> </li><li><code>npm run create-db</code> –初始化数据库</li><li><code>npm run check</code> –执行mocha测试用例和js代码规范检查</li><li><code>npm run dev</code> –启动开发模式的服务器 监视并在发生代码变更时自动重启</li><li><code>npm start</code> –启动生产模式服务器</li></ol><p><strong><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></strong> 看到浏览器中如下提示，表示服务端delos已经部署成功</p><blockquote><p>RAP2后端服务已启动，请从前端服务(rap2-dolores)访问。 RAP2 back-end server is started, please visit via front-end service (rap2-dolores).</p></blockquote><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><ol><li><p>执行 <strong>npm run create-d</strong> , 提示没有 <em>/dist</em></p><p> <code>原因</code>：运行 npm run build 就可以启动 ts 编译，把源文件编译到 dist 文件夹里面，就有 dist/ 目录了。</p></li><li><p>执行 <strong>npm run create-db</strong> 命令, Unable to connect to the database: { SequelizeConnectionError: Client does not support authentication protocol requested by server; consider upgrading MySQL client    </p><p> <code>解决</code>：建议使用旧密码哈希算法, 执行如下sql</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'USER'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'PASSWORD'</span></span><br></pre></td></tr></table></figure><p> <em><a href="https://github.com/mysqljs/mysql/issues/1574" target="_blank" rel="noopener">参考</a></em></p></li><li><p>执行 <strong>npm run create-db</strong> 命令，提示Unable to connect to the database:{ SequelizeAccessDeniedError: Access denied for user ‘root‘@’localhost’ (using password:NO)}</p><p> <code>原因</code>：未修改rap2-delos/src/config目录下数据库配置文件，或者是与文件中的数据库信息与之连接的数据库信息不匹配</p></li></ol><h2 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h2><ol><li><em>git clone <a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">https://github.com/thx/rap2-dolores</a></em> –克隆工程</li><li><em>npm install</em></li><li><em>npm run dev</em> –开发模式, 自动监视改变后重新编译</li><li><em>npm run test</em> –备注：测试用例</li><li><em>npm run build</em> –生产模式, 编译React生产包</li><li><em>serve -s ./build -p 80</em> –用serve命令或nginx服务器路由到编译产出的build文件夹作为静态服务器即可</li></ol><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问: <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>, 即可看到对应功能</p><h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><ol><li><code>rap2-delos</code> 服务端启动 <em>npm run dev</em> {:&amp;.moveIn}</li><li><code>rap2-dolores</code> 客户端启动 <em>npm run dev</em></li><li><code>redis</code> 缓存启动 <em>redis-server.exe redis.windows.conf</em></li><li><code>mysql</code> 数据库 <em>数据库连接</em></li><li><code>http://localhost:3000</code> <em>页面登录访问</em></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;rap2&lt;/code&gt;，阿里前端团队开源接口管理工具RAP第二代，部署说明&lt;/p&gt;
    
    </summary>
    
      <category term="工程部署" scheme="http://yoursite.com/categories/%E5%B7%A5%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="rap2" scheme="http://yoursite.com/tags/rap2/"/>
    
      <category term="可视化接口管理工具" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>react-router 之 HashRouter &amp; BrowserRouter</title>
    <link href="http://yoursite.com/passages/react-router%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/passages/react-router问题/</id>
    <published>2018-10-16T04:00:00.000Z</published>
    <updated>2019-01-18T12:09:54.777Z</updated>
    
    <content type="html"><![CDATA[<p><code>react-router</code>，react 路由， <code>HashRouter</code> , <code>BrowserRouter</code> 区分。</p><a id="more"></a><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h2><p>关于 <code>React-Router</code> v4 版本的两种路由方式 <code>HashRouter</code> , <code>BrowserRouter</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BrowserRouter : http:<span class="comment">//localhost:3000/abc/def</span></span><br><span class="line">HashRouter: http:<span class="comment">//localhost:3000/#/abc/def  //hash地址就是指#号后面的url</span></span><br></pre></td></tr></table></figure><p><code>BrowserRouter</code> 基于 url 的 <code>pathName</code> 字段, <code>HashRouter</code> 则基于 <code>hash</code> 段。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>采用 <code>BrowserRouter</code> 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Index&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/Search"</span> component=&#123;Search&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure><p>开发时正常，打包后的静态页面空白, 访问时无法访问。</p><ol><li>查看发现静态资源引用异常，修改静态资源引用，改为相对路径，本身是 <code>/static/js -&gt; ./static/js</code>。<br> 在package.json文件中添加homepage字段并设置为”.” || 直接修改生成后的静态页面引用。</li><li>发现静态资源正常，但是页面还是加载不到。</li><li>改为 <code>HashRouter</code> 可以访问。</li></ol><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li><p>HashRouter<br> <code>hashHistory</code> 使用URL中的hash（#）部分去创建路由.<br> 举例来说，用户访问 /search, 实际会看到的是 <code>http://localhost:3000/#/search</code> 加载对应组件。<br> 访问 /（<code>http://localhost:3000/#/</code>）时 加载对应组件。</p></li><li><p>BrowserRouter<br> <code>browserHistory</code> 是使用 React-Router 的应用推荐的 history方案。它使用浏览器中的 History API 用于处理 URL.创建一个真实的URL.<br> 在 browserHistory 模式下，URL 是指向真实 URL 的资源路径。<br> 当通过真实 URL 访问网站的时候，由于路径是指向服务器的真实路径，但并没有对应物理路径/文件 ，实际所有内容是通过React-Router去渲染React组件，<br> 所以用户访问的资源不存在，则空白。</p></li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>采用 HashRouter–开发时可以，打包后的页面访问也可用。</li><li>采用 BrowserRouter—开发时可以，打包后的页面不可直接访问。<br> 本地开发时可以通过配置 webpack-devServer 的 historyApiFallback，create-react-app 已配置。<ul><li><a href="https://webpack.js.org/configuration/dev-server/#devserver-historyapifallback" target="_blank" rel="noopener">devServer.historyApiFallback</a></li><li><a href="http://echizen.github.io/tech/2016/07-05-webpack-dev-server-react-router-config" target="_blank" rel="noopener">webpack-dev-server使用react-router browserHistory的配置</a></li></ul></li><li>采用 BrowserRouter–服务端支持<ul><li>nginx 方式。指定目的文件夹，指定 index.html。全部导到index。</li><li>nodejs处理（express或koa）.</li><li><a href="https://www.thinktxt.com/react/2017/02/26/react-router-browserHistory-refresh-404-solution.html" target="_blank" rel="noopener">React-Router browserHistory浏览器刷新出现页面404解决方案</a></li></ul></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> react.com;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /user/src/React-Demo/dist;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置静态资源目录</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'./build'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有访问，都指定返回 index.html</span></span><br><span class="line"><span class="comment">//而index.html会根据React-Router规则去匹配任何一个route</span></span><br><span class="line">app.get(<span class="string">'/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(path.join(__dirname, <span class="string">'./build'</span>, <span class="string">'index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置服务器</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'众享后台 listening at http://%s:%s'</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>create-react-app 本地开发时使用 <code>BrowserRouter</code> 可以支持（webpack服务器-已配置）。</li><li>设置代理到 node 服务器时，注意是以 /api/ <code>开头</code>。</li><li>若路径中含有 /api/, 上步没有设置开头，则页面被转发到 node 服务器。<br> 返回的虽然设置了 <code>index.html</code>, 但是加载对应 <code>index.html</code> 中的静态资源的时候，返回的也是页面，不是静态资源。<br> 如果资源返回正常，页面是可以正常加载的，因为只要都返回静态页面，具体路由是有对应js处理的。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: &#123;</span><br><span class="line">  <span class="string">"^/api/"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"http://localhost:3001"</span>,</span><br><span class="line">    <span class="string">"changeOrigin"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;react-router&lt;/code&gt;，react 路由， &lt;code&gt;HashRouter&lt;/code&gt; , &lt;code&gt;BrowserRouter&lt;/code&gt; 区分。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="HashRouter" scheme="http://yoursite.com/tags/HashRouter/"/>
    
      <category term="BrowserRouter" scheme="http://yoursite.com/tags/BrowserRouter/"/>
    
  </entry>
  
  <entry>
    <title>react-router 页面跳转</title>
    <link href="http://yoursite.com/passages/react-router%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/passages/react-router页面跳转/</id>
    <published>2018-10-10T04:30:00.000Z</published>
    <updated>2019-01-18T12:09:54.780Z</updated>
    
    <content type="html"><![CDATA[<p><code>react-router</code>，页面跳转。</p><a id="more"></a><h2 id="props-match-params"><a href="#props-match-params" class="headerlink" title="props.match.params"></a>props.match.params</h2><p>此种方式，参数会显示在 <code>url地址栏</code> 上。</p><p>地址形式为 <code>/</code> 连接的形式。</p><ol><li><p><em>路由写法</em></p><p> 多个参数，以 <code>/</code> 分割， <code>?</code> 代表非必填, <code>*</code> 代表所有.</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/a/:data1/:data2?"</span> component=&#123;a&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者所有参数拼接成一个参数，可以用特殊字段隔开，目的页面解析参数即可。</span></span><br><span class="line"><span class="comment">//避免出现 / 的转义问题</span></span><br><span class="line">&lt;Route path=<span class="string">"/a/:data*"</span> component=&#123;a&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p><em>跳转写法</em></p><p> 注意需要对参数编码，若参数中含有 <code>/</code> ，不编码导致多个参数截取错误</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//link组件</span></span><br><span class="line">&lt;Link to=&#123;<span class="string">"/a/"</span> + <span class="built_in">encodeURIComponent</span>(data1) + <span class="string">"/"</span> + <span class="built_in">encodeURIComponent</span>(data2)&#125;&gt;&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//history</span></span><br><span class="line"><span class="keyword">this</span>.props.history.push(path)</span><br></pre></td></tr></table></figure></li><li><p><em>取值</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.match.params);</span><br><span class="line"><span class="comment">//为对象，可以获取参数，注意转义</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>此种写法页面跳转参数在url上，且为 <code>?data1=1&amp;data2=2</code> 的形式。</p><ol><li><p><em>路由写法</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/a"</span> component=&#123;a&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p><em>跳转写法</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//link组件</span></span><br><span class="line">&lt;Link to=&#123;&#123;</span><br><span class="line">    pathname: <span class="string">"/courses"</span>,</span><br><span class="line">    search: <span class="string">"?sort=name&amp;hha=aa"</span>,</span><br><span class="line"> &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//history</span></span><br><span class="line"><span class="keyword">this</span>.props.history.push(path)</span><br></pre></td></tr></table></figure></li><li><p><em>取值</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.location.search);</span><br><span class="line"><span class="comment">//输出的值为一个字符串，不能区分出参数，需要自己解析处理参数</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>此种写法页面跳转参数不在url上, 类似 <code>post</code> 提交。</p><ol><li><p><em>路由写法</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/a"</span> component=&#123;a&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p><em>跳转写法</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//link组件</span></span><br><span class="line">&lt;Link to=&#123;&#123;</span><br><span class="line">    pathname: <span class="string">"/courses"</span>,</span><br><span class="line">    state: &#123;</span><br><span class="line">      data1: <span class="number">1</span>,</span><br><span class="line">      data2: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line"> &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//history</span></span><br><span class="line"><span class="keyword">this</span>.props.history.push(path)</span><br></pre></td></tr></table></figure></li><li><p><em>取值</em></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.location.state);</span><br><span class="line"><span class="comment">//为对象，可以获取参数</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>页面重定向，直接传 location 对象，而不是 location.pathName, 否则造成参数丢失</p><p>this.props.history.push(this.props.history.location)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;react-router&lt;/code&gt;，页面跳转。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="页面跳转" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>react-css-loader</title>
    <link href="http://yoursite.com/passages/react-css/"/>
    <id>http://yoursite.com/passages/react-css/</id>
    <published>2018-09-26T12:30:00.000Z</published>
    <updated>2019-01-18T12:09:54.776Z</updated>
    
    <content type="html"><![CDATA[<p><code>css-loader</code>，react 开发过程中解决全局污染问题。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 <code>create-react-app</code> 开发过程中， 出现 <code>css全局污染</code>。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><code>webpack</code> 处理过程中 的 <code>css-loader</code> 可以解决全局污染问题。</p><p>原理是最终页面渲染的类名变为自定义<code>字符串</code> 的形式。</p><h2 id="开启css-loader"><a href="#开启css-loader" class="headerlink" title="开启css-loader"></a>开启css-loader</h2><p>以 <code>webpack.config.dev.js</code> 说明 , <code>webpack.config.prod.js</code> 也需要改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">options: &#123;</span><br><span class="line">  importLoaders: <span class="number">1</span>,</span><br><span class="line">  modules: <span class="literal">true</span>, <span class="comment">//新增，开启css-loader</span></span><br><span class="line">  localIdentName: <span class="string">'[name]__[local]__[hash:base64:5]'</span>, <span class="comment">//新增规则</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>页面所有样式失去效果，不要着急</p><p>注意事项：</p><ul><li>将 <code>import</code> 进来的 <code>./SomeComponent.css</code> 分配给一个本地常量.</li><li>在 <code>JSX</code> 中将 <code>className</code> 替换成的形式 <code>{styles.myClass}</code>. </li><li>需要修改 <code>CSS</code> 文件和 <code>JSX</code> 中的 <code>class</code> 名。因为 <code>CSS Modules</code> 不允许”-“出现在类名中。</li></ul><h2 id="关于ant-design冲突解决"><a href="#关于ant-design冲突解决" class="headerlink" title="关于ant-design冲突解决"></a>关于ant-design冲突解决</h2><p>按照上述改完之后，发现 ant-design 样式全部失效.</p><p><code>antd</code> 和 <code>css modules</code> 不能混用，针对 <code>antd</code> 的 <code>css</code> 单独写一条 <code>loader</code> 的规则, 不开启 <code>css modules</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules|antd\.css/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">          importLoaders: <span class="number">1</span>,</span><br><span class="line">          modules: <span class="literal">true</span>,</span><br><span class="line">          localIdentName: <span class="string">'[name]__[local]__[hash:base64:5]'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">              </span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  include: <span class="regexp">/node_modules|antd\.css/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">          importLoaders: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">              </span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="CSS作用域相关"><a href="#CSS作用域相关" class="headerlink" title="CSS作用域相关"></a>CSS作用域相关</h2><ol><li><code>CSS Modules</code> 允许使用 <code>:global(.className)</code> 的语法，声明一个全局规则。凡是这样声明的class，都不会被编译成哈希字符串。</li><li><code>CSS Modules</code> 还提供一种显式的局部作用域语法 <code>:local(.className)</code>，等同于 <code>.className</code>.<br> 适用于解决对标签定义样式的问题，标签写样式，不经过 <code>localIdentName</code> 造成全局污染。修改为： <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:local(.a)</span>&#123;</span><br><span class="line">  tbody tr td &#123;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ant-design实现按需加载"><a href="#ant-design实现按需加载" class="headerlink" title="ant-design实现按需加载"></a>ant-design实现按需加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">  include: paths.appSrc,</span><br><span class="line">  loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">     plugins: [ <span class="comment">//按需加载</span></span><br><span class="line">       [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;]</span><br><span class="line">     ],</span><br><span class="line">     <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">     <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">     <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">     cacheDirectory: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;css-loader&lt;/code&gt;，react 开发过程中解决全局污染问题。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="create-react-app" scheme="http://yoursite.com/tags/create-react-app/"/>
    
      <category term="css-loader/antd" scheme="http://yoursite.com/tags/css-loader-antd/"/>
    
  </entry>
  
  <entry>
    <title>axios请求之异步处理</title>
    <link href="http://yoursite.com/passages/es6-async/"/>
    <id>http://yoursite.com/passages/es6-async/</id>
    <published>2018-09-20T08:00:00.000Z</published>
    <updated>2019-01-21T14:32:46.195Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>axios</code> 关于异步请求的处理。</p><a id="more"></a><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">官网</a></p><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回了一个promise对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(url, &#123;</span><br><span class="line">      params: params</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res);  </span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//async 异步函数</span></span><br><span class="line"><span class="comment">//await后面是一个Promise对象，用来等待Promise对象状态被resolved</span></span><br><span class="line"><span class="comment">//如果await的是Promise对象会造成异步函数停止执行并且等待Promise的解决</span></span><br><span class="line"><span class="keyword">async</span> getData() &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> request(<span class="string">'url'</span>, <span class="string">'data'</span>);</span><br><span class="line">  consoel.log(res);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//axios返回的就是一个Promise对象，此函数返回。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(url, &#123;</span><br><span class="line">    params: params</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要在then方法里回调</span></span><br><span class="line">request(<span class="string">'url'</span>, &#123;&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;axios&lt;/code&gt; 关于异步请求的处理。&lt;/p&gt;
    
    </summary>
    
      <category term="请求" scheme="http://yoursite.com/categories/%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="es6 promise/async/await" scheme="http://yoursite.com/tags/es6-promise-async-await/"/>
    
  </entry>
  
  <entry>
    <title>Gulp &amp;&amp; Grunt</title>
    <link href="http://yoursite.com/passages/gulp&amp;grunt/"/>
    <id>http://yoursite.com/passages/gulp&amp;grunt/</id>
    <published>2018-08-04T12:00:00.000Z</published>
    <updated>2019-01-21T14:32:42.730Z</updated>
    
    <content type="html"><![CDATA[<p><code>Gulp</code> 与 <code>Grunt</code> 简单介绍</p><a id="more"></a><h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>用自动化构建工具增强你的工作流程！</p><ul><li><code>易于使用</code>，通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。</li><li><code>构建快速</code>，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。</li><li><code>插件高质</code>，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</li><li><code>易于学习</code>，通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g  <span class="comment">//全局安装</span></span><br><span class="line">npm install --save-dev gulp  <span class="comment">//作为项目开发依赖安装</span></span><br></pre></td></tr></table></figure><h2 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp  <span class="comment">//默认执行default任务</span></span><br><span class="line"><span class="comment">//手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用</span></span><br><span class="line">gulp --gulpfile &lt;gulpfile path&gt;</span><br></pre></td></tr></table></figure><p>Task 可以通过 <code>gulp &lt;task&gt; &lt;othertask&gt;</code> 方式来执行。如果只运行 <code>gulp</code> 命令，则会执行所注册的名为 <code>default</code> 的 task，如果没有这个 task，那么 gulp 会报错。</p><h2 id="gulp与grunt区别"><a href="#gulp与grunt区别" class="headerlink" title="gulp与grunt区别"></a>gulp与grunt区别</h2><p><code>Grunt</code> 主要是以文件为媒介来运行它的工作流的，比如在Grunt中执行完一项任务后，会把结果写入到一个临时文件中，然后可以在这个临时文件内容的基础上执行其它任务，执行完成后又把结果写入到临时文件中，然后又以这个为基础继续执行其它任务…就这样反复下去。</p><p>而在<code>Gulp</code>中，使用的是Nodejs中的stream(流)，首先获取到需要的stream，然后可以通过stream的 <code>pipe()</code> 方法把流导入到你想要的地方，比如Gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以Gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是Gulp的速度比Grunt快的一个原因。</p><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>掌握四个API即可</p><ul><li><code>gulp.task()</code> //定义一个使用 Orchestrator 实现的任务（task）。</li><li><code>gulp.src()</code> //输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。</li><li><code>gulp.dest()</code> //能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</li><li><code>gulp.watch()</code> //监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</li></ul><h1 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h1><p><code>Grunt</code>是 <strong>JavaScript</strong> 世界的构建工具。</p><h2 id="为什么要用grunt？"><a href="#为什么要用grunt？" class="headerlink" title="为什么要用grunt？"></a>为什么要用<code>grunt</code>？</h2><p><code>Grunt</code> 生态系统非常庞大，并且一直在增长。由于拥有数量庞大的插件可供选择，因此，你可以利用 Grunt 自动完成任何事，并且花费最少的代价，只要配置好 <code>Gruntfile</code> 文件, 就可以实现自动执行。</p><p>每次运行 <code>grunt</code> 时，他就利用 <code>node</code> 提供的 <code>require()</code> 系统查找本地安装的 <code>Grunt</code>。正是由于这一机制，你可以在项目的任意子目录中运行<code>grunt</code> 。如果找到一份本地安装的 <code>Grunt</code> ，<code>CLI</code> 就将其加载，并传递<code>Gruntfile</code> 中的配置信息，然后执行你所指定的任务。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli   <span class="comment">//全局安装</span></span><br><span class="line"><span class="comment">//Grunt CLI的任务很简单：调用与Gruntfile在同一目录中的Grunt，</span></span><br><span class="line"><span class="comment">//这样带来的好处是，允许你在同一个系统上同时安装多个版本的 Grunt。</span></span><br></pre></td></tr></table></figure><h2 id="Gruntfile"><a href="#Gruntfile" class="headerlink" title="Gruntfile"></a>Gruntfile</h2><p><code>Gruntfile</code>主要有以下几个模块组成。</p><ul><li>“wrapper” 函数</li><li>项目与任务配置</li><li>加载grunt插件和任务</li><li>自定义任务</li></ul><h2 id="wrapper函数"><a href="#wrapper函数" class="headerlink" title="wrapper函数"></a>wrapper函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do grunt-related things in here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="项目和任务配置"><a href="#项目和任务配置" class="headerlink" title="项目和任务配置"></a>项目和任务配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="加载插件和任务"><a href="#加载插件和任务" class="headerlink" title="加载插件和任务"></a>加载插件和任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载能够提供"uglify"任务的插件。</span></span><br><span class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure><h2 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default task(s)，可添加执行多个任务</span></span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure><h2 id="Grunt配置"><a href="#Grunt配置" class="headerlink" title="Grunt配置"></a>Grunt配置</h2><p><code>Grunt</code> 的 <code>task</code> 配置都是在 <code>Gruntfile</code> 中的 <code>grunt.initConfig</code> 方法中指定的。</p><p>此配置主要是以任务名称命名的属性，也可以包含其他任意数据。一旦这些代表任意数据的属性与任务所需要的属性相冲突，就将被忽略。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Gulp&lt;/code&gt; 与 &lt;code&gt;Grunt&lt;/code&gt; 简单介绍&lt;/p&gt;
    
    </summary>
    
      <category term="打包工具" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="grunt" scheme="http://yoursite.com/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>log4js</title>
    <link href="http://yoursite.com/passages/log4js/"/>
    <id>http://yoursite.com/passages/log4js/</id>
    <published>2018-07-28T12:00:00.000Z</published>
    <updated>2019-01-21T14:32:33.130Z</updated>
    
    <content type="html"><![CDATA[<p><code>log4js</code> 简单知识</p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>日常开发中，对于日志模块，<code>java</code>开发 -&gt; <code>log4j</code>，而 <code>nodejs</code>开发，则对应工具为 <code>log4js</code>。</p><h1 id="log4js-介绍"><a href="#log4js-介绍" class="headerlink" title="log4js 介绍"></a><em>log4js</em> 介绍</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install log4js --save</span><br></pre></td></tr></table></figure><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><blockquote><p> 等级由低到高：trace &lt; debug &lt; info &lt; warn &lt; Error &lt; Fatal;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logger.trace(<span class="string">'Entering cheese testing'</span>);</span><br><span class="line">logger.debug(<span class="string">'Got cheese.'</span>);</span><br><span class="line">logger.info(<span class="string">'Cheese is Gouda.'</span>);</span><br><span class="line">logger.warn(<span class="string">'Cheese is quite smelly.'</span>);</span><br><span class="line">logger.error(<span class="string">'Cheese is too ripe!'</span>);</span><br><span class="line">logger.fatal(<span class="string">'Cheese was breeding ground for listeria.'</span>);</span><br></pre></td></tr></table></figure><ul><li>debug 可以随意的使用于任何觉得有利于在调试时更详细的了解系统运行状态的东东；</li><li>info  重要，输出信息：用来反馈系统的当前状态给最终用户的；</li><li>warn, 可修复，系统可继续运行下去；</li><li>Error, 可修复性，但无法确定系统会正常的工作下去;</li><li>Fatal, 相当严重，可以肯定这种错误已经无法修复，并且如果系统继续运行下去的话后果严重。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getLogger(<span class="string">"参数"</span>) <span class="comment">//追踪产生此日志的文件.</span></span><br><span class="line"></span><br><span class="line">log4js.configure(log4jsConfig); <span class="comment">//设置配置项</span></span><br></pre></td></tr></table></figure><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"log4jsConfig": &#123;</span><br><span class="line">    "appenders": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"console"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"file"</span>, </span><br><span class="line">        "absolute": true, //绝对路径</span><br><span class="line">        "filename": "a.log", //存放日志文件的目录和文件名</span><br><span class="line">        "maxLogSize": 10000000, //每个日志文件大小</span><br><span class="line">        "backups": 100, //备份文件的数量，超过会被删除</span><br><span class="line">        "category": "http" //日志策略,类别，与级别不同的一个维度</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    "levels": &#123;</span><br><span class="line">      "[all]": "INFO" //设置日志级别,只打印info级别及以上级别的</span><br><span class="line">    &#125;,</span><br><span class="line">    "replaceConsole": true //替换掉原来自带的console, 自带的没有颜色区分</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="记录请求"><a href="#记录请求" class="headerlink" title="记录请求"></a>记录请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"></span><br><span class="line">app.use(log4js.connectLogger(log4js.getLogger(<span class="string">"http"</span>), &#123;</span><br><span class="line">  level: <span class="string">'auto'</span>,</span><br><span class="line">  format: <span class="string">':remote-addr - -'</span> + <span class="string">' ":method :url HTTP/:http-version"'</span> + <span class="string">' :status :content-length :response-time ":referrer"'</span> + <span class="string">' ":user-agent"'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>日志的一个重要功能不仅仅是在调试时使用，最重要的还是当前端发起请求时，能把该请求记录在日志中，该行代码的作用就是这个功能。</p><p>其中的level参数表示日志输出级别，设置为auto，日志级别对应规则为：</p><ul><li>http返回码为3**：level=WARN；</li><li>http返回码为4<strong>，5</strong>时，level=ERROR；</li><li>其他的返回码，level=INFO</li></ul><h1 id="日志分片"><a href="#日志分片" class="headerlink" title="日志分片"></a>日志分片</h1><h2 id="按文件大小"><a href="#按文件大小" class="headerlink" title="按文件大小"></a>按文件大小</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"log4jsConfig": &#123;</span><br><span class="line">    "appenders": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"console"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"file"</span>,</span><br><span class="line">        <span class="attr">"absolute"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"filename"</span>: <span class="string">"a.log"</span>,</span><br><span class="line">        "maxLogSize": 10,  //单位应该是字节，设置 10000000 ，基本是10兆左右</span><br><span class="line">        "backups": 5,</span><br><span class="line">        "category": "http"</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    "levels": &#123;</span><br><span class="line">      "[all]": "DEBUG"</span><br><span class="line">    &#125;,</span><br><span class="line">    "replaceConsole": true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="对应效果"><a href="#对应效果" class="headerlink" title="对应效果"></a>对应效果</h2><p>只能备份 <code>backups</code> 指定的份数，最新的会更新删除替换， 且每个文件为 <code>maxLogSize</code>的值。</p><h2 id="按日期分片"><a href="#按日期分片" class="headerlink" title="按日期分片"></a>按日期分片</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"log4jsConfig": &#123;</span><br><span class="line">    "appenders": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"console"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"dateFile"</span>,</span><br><span class="line">        <span class="attr">"absolute"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"filename"</span>: <span class="string">"a-accesslog"</span>,</span><br><span class="line">        <span class="attr">"pattern"</span>: <span class="string">"-yyyy-MM-dd.log"</span>,</span><br><span class="line">        <span class="attr">"alwaysIncludePattern"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"http"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    "levels": &#123;</span><br><span class="line">      "[all]": "DEBUG"</span><br><span class="line">    &#125;,</span><br><span class="line">    "replaceConsole": true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="对应效果-1"><a href="#对应效果-1" class="headerlink" title="对应效果"></a>对应效果</h2><p>日志按照日期进行分片，且不会限制大小。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;log4js&lt;/code&gt; 简单知识&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="log4js" scheme="http://yoursite.com/tags/log4js/"/>
    
  </entry>
  
  <entry>
    <title>Fis3 &amp;&amp; webpack</title>
    <link href="http://yoursite.com/passages/FIS3&amp;&amp;webpack/"/>
    <id>http://yoursite.com/passages/FIS3&amp;&amp;webpack/</id>
    <published>2018-05-13T13:00:00.000Z</published>
    <updated>2019-01-21T14:32:44.618Z</updated>
    
    <content type="html"><![CDATA[<p>打包工具 <code>Fis3</code> &amp; <code>webpack</code> 的介绍。</p><a id="more"></a><h1 id="FIS3"><a href="#FIS3" class="headerlink" title="FIS3"></a>FIS3</h1><p><strong>FIS3</strong> 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。</p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ul><li>资源提取。–从一推资源中提取指定的，发布到指定目录。</li><li>资源压缩。</li><li>资源版本号防止缓存。</li></ul><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="资源提取"><a href="#资源提取" class="headerlink" title="资源提取"></a>资源提取</h3><p><strong>fis-conf.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fis.match(<span class="string">'*.&#123;html,htm,tld,jsp,xml,inc,txt,md,java,properties,mar,list,aar,ftl,classes,doc,url,zip,php,db,json&#125;'</span>, &#123;</span><br><span class="line">  release : <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.match(<span class="string">'*.&#123;gif,jpg,jpeg,png,ico,swf,ttf,TTF,js,css&#125;'</span>,&#123;</span><br><span class="line">  release : <span class="string">'/a/b/$0'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>map.json</strong></p><p><code>FIS</code> 识别 <code>__RESOURCE_MAP__</code> 关键字替换为静态资源版本信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__RESOURCE_MAP__</span><br></pre></td></tr></table></figure><h3 id="资源发布"><a href="#资源发布" class="headerlink" title="资源发布"></a>资源发布</h3><p><strong>fis-conf.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fis.media(<span class="string">'test'</span>).match(<span class="string">'*.&#123;css,js&#125;'</span>,&#123;</span><br><span class="line">  useHash: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.media(<span class="string">'test'</span>).match(<span class="string">'*.&#123;gif,jpg,jpeg,png,ico,swf,ttf,js,css,json&#125;'</span>,&#123;</span><br><span class="line">  useMap: <span class="literal">true</span>,</span><br><span class="line">  release: <span class="string">'/a/b/$0'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.media(<span class="string">'pro'</span>).match(<span class="string">'*.css'</span>,&#123;</span><br><span class="line">  useHash: <span class="literal">true</span>,</span><br><span class="line">  optimizer: fis.plugin(<span class="string">'clean-css'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.media(<span class="string">'pro'</span>).match(<span class="string">'*.js'</span>,&#123;</span><br><span class="line">  useHash: <span class="literal">true</span>,</span><br><span class="line">  optimizer: fis.plugin(<span class="string">'uglify-js'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.media(<span class="string">'pro'</span>).match(<span class="string">'*.&#123;gif,jpg,jpeg,png,ico,swf,ttf,js,css,json&#125;'</span>,&#123;</span><br><span class="line">  useMap: <span class="literal">true</span>,</span><br><span class="line">  release: <span class="string">'/a/b/$0'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>map.json</strong>, 可以改名字，后续生成的对应关系就在对应文件中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__RESOURCE_MAP__</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fis3 release test -d ../c/d</span><br></pre></td></tr></table></figure><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="webpack工程demo"><a href="#webpack工程demo" class="headerlink" title="webpack工程demo"></a>webpack工程demo</h2><p><a href="https://github.com/zzugbb/webpack-demo" target="_blank" rel="noopener">详见</a></p><h2 id="对应资料"><a href="#对应资料" class="headerlink" title="对应资料"></a>对应资料</h2><p><a href="https://github.com/zzugbb/webpack-demo/wiki" target="_blank" rel="noopener">详见</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打包工具 &lt;code&gt;Fis3&lt;/code&gt; &amp;amp; &lt;code&gt;webpack&lt;/code&gt; 的介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="打包工具" scheme="http://yoursite.com/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Fis3" scheme="http://yoursite.com/tags/Fis3/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
